
###################
# 1. 스트래티지 패턴
	인터페이스 - 기능의 선언과 구현을 분리 / 접근점을 공유

	델리게이트 - 어떤 객체가 기능을 수행할 때, 다른 객체의 기능을 호출하여 사용하는 것
	
	weapon이 접근점이 된다.
	game character가 어떤 waepon을 사용할지 선택하는것이 델리게이트이다.

###################
# 2. 어댑터 패턴

: 알고리즘을 요구사항에 맞춰 사용할 수 있다.

이미 구현되어 있는 알고리즘을 interface를 이용하여 새로운 요구사항에 맞게 변경하여 사용하는 패턴


###################
# 3. 템플릿 메소드 패턴
: 일정한 프로세스를 가진 요구사항을 템플릿 메소드 패턴을 이용하여 구현할 수 있다.

알고리즘의 구조를 메소드에 정의하고 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하는 것.

언제 쓰는가?
구현하려는 알고리즘이 일정한 프로세스가 있다. (여러 단계로 나눌 수 있다.)
구현하려는 알고리즘이 변경 가능성이 클때

알고리즘을 여러 단계로 나눈다.
나눠진 알고리즘의 단계를 메소드로 선언한다.
알고리즘을 수행할 템플릿 메소드를 만든다.
하위 클래스에서 나눠진 메소드를 구현한다.


